// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Mempools", testMempools)
	t.Run("MempoolBins", testMempoolBins)
}

func TestDelete(t *testing.T) {
	t.Run("Mempools", testMempoolsDelete)
	t.Run("MempoolBins", testMempoolBinsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Mempools", testMempoolsQueryDeleteAll)
	t.Run("MempoolBins", testMempoolBinsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Mempools", testMempoolsSliceDeleteAll)
	t.Run("MempoolBins", testMempoolBinsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Mempools", testMempoolsExists)
	t.Run("MempoolBins", testMempoolBinsExists)
}

func TestFind(t *testing.T) {
	t.Run("Mempools", testMempoolsFind)
	t.Run("MempoolBins", testMempoolBinsFind)
}

func TestBind(t *testing.T) {
	t.Run("Mempools", testMempoolsBind)
	t.Run("MempoolBins", testMempoolBinsBind)
}

func TestOne(t *testing.T) {
	t.Run("Mempools", testMempoolsOne)
	t.Run("MempoolBins", testMempoolBinsOne)
}

func TestAll(t *testing.T) {
	t.Run("Mempools", testMempoolsAll)
	t.Run("MempoolBins", testMempoolBinsAll)
}

func TestCount(t *testing.T) {
	t.Run("Mempools", testMempoolsCount)
	t.Run("MempoolBins", testMempoolBinsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Mempools", testMempoolsInsert)
	t.Run("Mempools", testMempoolsInsertWhitelist)
	t.Run("MempoolBins", testMempoolBinsInsert)
	t.Run("MempoolBins", testMempoolBinsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Mempools", testMempoolsReload)
	t.Run("MempoolBins", testMempoolBinsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Mempools", testMempoolsReloadAll)
	t.Run("MempoolBins", testMempoolBinsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Mempools", testMempoolsSelect)
	t.Run("MempoolBins", testMempoolBinsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Mempools", testMempoolsUpdate)
	t.Run("MempoolBins", testMempoolBinsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Mempools", testMempoolsSliceUpdateAll)
	t.Run("MempoolBins", testMempoolBinsSliceUpdateAll)
}
