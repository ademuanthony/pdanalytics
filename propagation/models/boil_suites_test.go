// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("Blocks", testBlocks)
	t.Run("BlockBins", testBlockBins)
	t.Run("Propagations", testPropagations)
	t.Run("Votes", testVotes)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviations)
}

func TestDelete(t *testing.T) {
	t.Run("Blocks", testBlocksDelete)
	t.Run("BlockBins", testBlockBinsDelete)
	t.Run("Propagations", testPropagationsDelete)
	t.Run("Votes", testVotesDelete)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("Blocks", testBlocksQueryDeleteAll)
	t.Run("BlockBins", testBlockBinsQueryDeleteAll)
	t.Run("Propagations", testPropagationsQueryDeleteAll)
	t.Run("Votes", testVotesQueryDeleteAll)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("Blocks", testBlocksSliceDeleteAll)
	t.Run("BlockBins", testBlockBinsSliceDeleteAll)
	t.Run("Propagations", testPropagationsSliceDeleteAll)
	t.Run("Votes", testVotesSliceDeleteAll)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("Blocks", testBlocksExists)
	t.Run("BlockBins", testBlockBinsExists)
	t.Run("Propagations", testPropagationsExists)
	t.Run("Votes", testVotesExists)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsExists)
}

func TestFind(t *testing.T) {
	t.Run("Blocks", testBlocksFind)
	t.Run("BlockBins", testBlockBinsFind)
	t.Run("Propagations", testPropagationsFind)
	t.Run("Votes", testVotesFind)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsFind)
}

func TestBind(t *testing.T) {
	t.Run("Blocks", testBlocksBind)
	t.Run("BlockBins", testBlockBinsBind)
	t.Run("Propagations", testPropagationsBind)
	t.Run("Votes", testVotesBind)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsBind)
}

func TestOne(t *testing.T) {
	t.Run("Blocks", testBlocksOne)
	t.Run("BlockBins", testBlockBinsOne)
	t.Run("Propagations", testPropagationsOne)
	t.Run("Votes", testVotesOne)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsOne)
}

func TestAll(t *testing.T) {
	t.Run("Blocks", testBlocksAll)
	t.Run("BlockBins", testBlockBinsAll)
	t.Run("Propagations", testPropagationsAll)
	t.Run("Votes", testVotesAll)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsAll)
}

func TestCount(t *testing.T) {
	t.Run("Blocks", testBlocksCount)
	t.Run("BlockBins", testBlockBinsCount)
	t.Run("Propagations", testPropagationsCount)
	t.Run("Votes", testVotesCount)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsCount)
}

func TestInsert(t *testing.T) {
	t.Run("Blocks", testBlocksInsert)
	t.Run("Blocks", testBlocksInsertWhitelist)
	t.Run("BlockBins", testBlockBinsInsert)
	t.Run("BlockBins", testBlockBinsInsertWhitelist)
	t.Run("Propagations", testPropagationsInsert)
	t.Run("Propagations", testPropagationsInsertWhitelist)
	t.Run("Votes", testVotesInsert)
	t.Run("Votes", testVotesInsertWhitelist)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsInsert)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {}

func TestReload(t *testing.T) {
	t.Run("Blocks", testBlocksReload)
	t.Run("BlockBins", testBlockBinsReload)
	t.Run("Propagations", testPropagationsReload)
	t.Run("Votes", testVotesReload)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("Blocks", testBlocksReloadAll)
	t.Run("BlockBins", testBlockBinsReloadAll)
	t.Run("Propagations", testPropagationsReloadAll)
	t.Run("Votes", testVotesReloadAll)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("Blocks", testBlocksSelect)
	t.Run("BlockBins", testBlockBinsSelect)
	t.Run("Propagations", testPropagationsSelect)
	t.Run("Votes", testVotesSelect)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("Blocks", testBlocksUpdate)
	t.Run("BlockBins", testBlockBinsUpdate)
	t.Run("Propagations", testPropagationsUpdate)
	t.Run("Votes", testVotesUpdate)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("Blocks", testBlocksSliceUpdateAll)
	t.Run("BlockBins", testBlockBinsSliceUpdateAll)
	t.Run("Propagations", testPropagationsSliceUpdateAll)
	t.Run("Votes", testVotesSliceUpdateAll)
	t.Run("VoteReceiveTimeDeviations", testVoteReceiveTimeDeviationsSliceUpdateAll)
}
